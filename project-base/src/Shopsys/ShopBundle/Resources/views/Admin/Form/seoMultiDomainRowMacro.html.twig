{% macro rows(multidomainForm, label, recommendedLength, cssClass = '') %}
    {% if isMultidomain() %}
        {% set cssClassOnMultidomainInputs = 'input--domain' %}
    {% else %}
        {% set cssClassOnMultidomainInputs = '' %}
    {% endif %}

    <div class="form-line">
        <strong class="form-line__label">
            {{ label }}:
        </strong>
        {% for domainId, domainForm in multidomainForm %}
            <div class="form-line__side {% if not loop.first %}margin-top-5{% endif %} js-characters-counter">
                <div class="form-line__item form-line__item--left">
                    <div class="input__wrap">
                        {% set attr = domainForm.vars.attr|merge({class: 'js-characters-counter-input ' ~ cssClass ~ ' ' ~ cssClassOnMultidomainInputs}) %}

                        {{ form_widget(domainForm, {
                            multidomain: true,
                            domainId: domainId,
                            attr: attr
                        }) }}
                        {% if isMultidomain() %}
                            <span class="input__domain">
                                {{ domainIcon(domainId) }}
                            </span>
                        {% endif %}
                    </div>
                </div>

                <div class="form-line__count">
                    {% if recommendedLength %}
                        <span class="form-line__count__desc js-characters-counter-info" data-recommended-length="{{ recommendedLength }}"></span>
                    {% endif %}
                </div>
                {{ form_errors(domainForm) }}
            </div>
        {% endfor %}
    </div>
{% endmacro %}